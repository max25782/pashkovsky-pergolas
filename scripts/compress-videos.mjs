import fs from 'fs'
import path from 'path'
import ffmpeg from 'fluent-ffmpeg'
import { fileURLToPath } from 'url'
import { dirname } from 'path'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ ffmpeg
import ffmpegPath from '@ffmpeg-installer/ffmpeg'
ffmpeg.setFfmpegPath(ffmpegPath.path)

const videoExtensions = ['.mp4', '.webm', '.mov', '.avi']

function isVideoFile(filename) {
  return videoExtensions.includes(path.extname(filename).toLowerCase())
}

function getAllVideos(dir, fileList = []) {
  const files = fs.readdirSync(dir)
  
  files.forEach(file => {
    const filePath = path.join(dir, file)
    const stat = fs.statSync(filePath)
    
    if (stat.isDirectory()) {
      getAllVideos(filePath, fileList)
    } else if (isVideoFile(file)) {
      fileList.push(filePath)
    }
  })
  
  return fileList
}

function compressVideo(inputPath) {
  return new Promise((resolve, reject) => {
    const outputPath = inputPath.replace(/(\.\w+)$/, '.compressed$1')
    const fileSize = fs.statSync(inputPath).size / (1024 * 1024) // MB
    
    // –ï—Å–ª–∏ –≤–∏–¥–µ–æ –º–µ–Ω—å—à–µ 50 MB, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (fileSize < 50) {
      console.log(`‚úì ${path.basename(inputPath)} —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π (${fileSize.toFixed(2)} MB)`)
      resolve()
      return
    }
    
    console.log(`üé¨ –°–∂–∏–º–∞—é ${path.basename(inputPath)} (${fileSize.toFixed(2)} MB)...`)
    
    ffmpeg(inputPath)
      .videoCodec('libx264')
      .audioCodec('aac')
      .outputOptions([
        '-crf 28', // –ö–∞—á–µ—Å—Ç–≤–æ (18-28: —á–µ–º –≤—ã—à–µ, —Ç–µ–º –±–æ–ª—å—à–µ —Å–∂–∞—Ç–∏–µ, 23 - default)
        '-preset medium', // –°–∫–æ—Ä–æ—Å—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        '-movflags +faststart', // –î–ª—è –≤–µ–±-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        '-vf scale=1920:-2' // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ 1920px
      ])
      .on('end', () => {
        const newSize = fs.statSync(outputPath).size / (1024 * 1024)
        console.log(`‚úì ${path.basename(inputPath)} —Å–∂–∞—Ç: ${fileSize.toFixed(2)} MB ‚Üí ${newSize.toFixed(2)} MB`)
        
        // –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        fs.unlinkSync(inputPath)
        fs.renameSync(outputPath, inputPath)
        
        resolve()
      })
      .on('error', (err) => {
        console.error(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ ${path.basename(inputPath)}:`, err.message)
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if (fs.existsSync(outputPath)) {
          fs.unlinkSync(outputPath)
        }
        reject(err)
      })
      .on('progress', (progress) => {
        if (progress.percent) {
          process.stdout.write(`\r  –ü—Ä–æ–≥—Ä–µ—Å—Å: ${Math.round(progress.percent)}%`)
        }
      })
      .save(outputPath)
  })
}

async function main() {
  const publicDir = path.join(__dirname, '../public')
  
  console.log('üîç –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤...\n')
  const videos = getAllVideos(publicDir)
  
  if (videos.length === 0) {
    console.log('–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
    return
  }
  
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${videos.length} –≤–∏–¥–µ–æ:\n`)
  
  for (const video of videos) {
    try {
      await compressVideo(video)
      console.log('') // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
    } catch (err) {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å ${video}`)
    }
  }
  
  console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ!')
}

main()

